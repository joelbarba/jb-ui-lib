// jb-page-placeholder = 'jb-btn'
// jbPagePlaceholder = 'jbBtn'


import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-jb-page-placeholder-demo',
  templateUrl: './jb-page-placeholder-demo.component.html',
  styleUrls: ['./jb-page-placeholder-demo.component.scss']
})
export class JbPagePlaceholderDemoComponent implements OnInit {
  public name = jbPagePlaceholderDoc.name;
  public desc = jbPagePlaceholderDoc.desc;
  public api = jbPagePlaceholderDoc.api;
  public instance = jbPagePlaceholderDoc.instance;

  public profileExample = {
    isSection: false,
    hasAvatar: false,
    hasData: false,
    hasInfo: false,
    hasInfoCenter: false,
    sectionList: []
  };

  public instance2 = `<jb-page-placeholder></jb-page-placeholder>`;
  public instance3 = `<jb-page-placeholder jbType="details"></jb-page-placeholder>`;
  public instance4 = `<jb-page-placeholder 
      jbType="details" 
      [jbTabs]="true">
</jb-page-placeholder>`;


  public cssReset = `$optional_input_color : $optional-color;
$focused_input_color  : $focused-color;
$required_input_color : $primary_color;
$invalid_input_color  : $invalid-color;
$valid_input_color    : $primary_color;
$disabled_input_color : $disabled-color;

.jb-page-placeholder-form-group {
  ...
}`;





  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n    `;
  public customCompCode = `<jb-dropdown [(ngModel)]="selObj" [jbList]="myList"></jb-dropdown>`;
  public compConf: any = {
    isRequired: false,
    isDisabled: false,
    rows: null,
    hasLabel: false,   labelText: 'My Description',
    hasTooltip: false, tooltipText: 'Hello World', tooltipPos: null, tooltipBody: false,
  };

  public upIns = () => {

    this.instance = '<jb-page-placeholder' + this.bsStr;

    if (this.profileExample.isSection) {
      this.instance += `jbType="profile"` + this.bsStr;
      this.instance += `[jbSections]="[`;

      this.profileExample.sectionList = [];
      if (this.profileExample.hasAvatar) {
        this.instance += `'avatar'`;
        this.profileExample.sectionList.push('avatar');
      }
      if (this.profileExample.hasData) {
        this.instance += (this.profileExample.sectionList.length > 0) ? `, 'data'` : `'data'`;
        this.profileExample.sectionList.push('data');
      }
      if (this.profileExample.hasInfo) {
        this.instance += (this.profileExample.sectionList.length > 0) ? `, 'info'` : `'info'`;
        this.profileExample.sectionList.push('info');
      }
      if (this.profileExample.hasInfoCenter) {
        this.instance += (this.profileExample.sectionList.length > 0) ? `, 'info-center'` : `'info-center'`;
        this.profileExample.sectionList.push('info-center');
      }

      this.instance += `]"`;
    } else {
      this.instance += `jbType="profile"`;
      this.profileExample.sectionList = ['avatar', 'data', 'info'];
    }

    this.instance += (`>` + this.brStr + `</jb-page-placeholder>`);
  };

  /*public upComp = () => {
    this.customCompCode = `<jb-page-placeholder `;

    let compClasses = '';
    if (this.compConf.hasFullWidth) { compClasses += (!!compClasses.length ? ' ' : '') + 'full-width'; }
    if (this.compConf.hasSquash)    { compClasses += (!!compClasses.length ? ' ' : '') + 'squash'; }
    if (!!compClasses) {
      this.customCompCode += `class="${compClasses}"` + this.bsStr;
    }
    this.customCompCode += `[(ngModel)]="myVal"` + this.bsStr;
    this.customCompCode += `(ngModelChange)="doSomething($event)"`;

    if (this.compConf.hasLabel)   { this.customCompCode += this.bsStr + `jbLabel="${this.compConf.labelText}"`; }
    if (this.compConf.isRequired) { this.customCompCode += this.bsStr + `[jbRequired]="true"`; }
    if (this.compConf.isDisabled) { this.customCompCode += this.bsStr + `[jbDisabled]="true"`; }

    if (this.compConf.hasTooltip) {
      this.customCompCode += this.bsStr + `jbTooltip="${this.compConf.tooltipText}"`;
      if (!!this.compConf.tooltipPos)  { this.customCompCode += this.bsStr + `jbTooltipPos="${this.compConf.tooltipPos}"`; }
      if (!!this.compConf.tooltipBody) { this.customCompCode += this.bsStr + `jbTooltipBody="${this.compConf.tooltipBody}"`; }
    }

    this.customCompCode += (`>` + this.brStr + `</jb-page-placeholder>`);
  };*/

  public addSection = () => {
    if (this.profileExample.isSection) {
      this.profileExample.hasAvatar = true;
      this.profileExample.hasData = true;
      this.profileExample.hasInfo = true;
      this.profileExample.hasInfoCenter = false;
    } else {
      this.profileExample.hasAvatar = false;
      this.profileExample.hasData = false;
      this.profileExample.hasInfo = false;
      this.profileExample.hasInfoCenter = false;
    }

    this.upIns();
  };




  constructor() { }

  ngOnInit() { this.upIns(); }

}


export const jbPagePlaceholderDoc = {
  name    : `jb-page-placeholder`,
  uiType  : 'component',
  desc    : `Generates an animation to display a fake page while loading`,
  api     : `[jbType]: Type of placeholder depending of the page configuration.
          'profile' - displays the profile section from a Edition Page
          'details' - (default) displays the edition details sections
[jbSections]: It works for jbType: 'profile' It's to display the profile accurate to the page separating by: 'avatar', 'data', 'info', 'info-center'
              (default) the section will show ['avatar', 'date', 'info'], displaying in that order. 
[jbTabs]: It works for jbType: 'details'. It will be added if the detail placeholder belongs to a tab section or a single whiteBg`,
  instance: `<jb-page-placeholder jbType="profile"></jb-page-placeholder>`,
  demoComp: JbPagePlaceholderDemoComponent
};
