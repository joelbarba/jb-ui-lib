// jb-list-paginator = 'jb-btn'
// jbListPaginator = 'jbBtn'


import {Component, Input, OnInit} from '@angular/core';

@Component({
  selector: 'app-jb-list-paginator-demo',
  templateUrl: './jb-list-paginator-demo.component.html',
  styleUrls: ['./jb-list-paginator-demo.component.scss']
})
export class JbListPaginatorDemoComponent implements OnInit {


  constructor() { }
  public name = jbListPaginatorDoc.name;
  public desc = jbListPaginatorDoc.desc;
  public api = jbListPaginatorDoc.api;
  public instance = jbListPaginatorDoc.instance;

  public instance2 =
`<jb-list-paginator [jbCtrl]="myList"
                   (jbPageChange)="page = $event">
</jb-list-paginator>`;

  public instance3 =
`<jb-list-paginator [jbCtrl]="myList"
                    jbShowSelector="true">
</jb-list-paginator>`;

  public instance4 =
`<jb-list-paginator class="full-width" [jbCtrl]="myList"></jb-list-paginator>`;

  public myList = {
    goToPage: (numPage) => { console.log('Going to page ', numPage); },
    currentPage : 1,
    totalPages  : 18,
    rowsPerPage : 10,
  };


  public cssReset = `$page_bg: $white !default;
$page_color: darken($primary_color, 10%) !default;
$page_border_color: #d7dade !default;
$page_hover_bg: #eeeeee !default;`;

  public page = 1;



  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n                   `;
  public customCompCode = ``;
  public compConf = {
    myList: {
      totalPages: 241,
      currentPage: 8,
      rowsPerPage: 10,
      // paginate: (rowsPerPage) => {
      //   console.log(rowsPerPage, new Date());
      // }
    },

    hasPageChange: false,
    hasMaxButtons: false,
    jbMaxButtons: 4,

    jbShowSelector: false,
    hasFullWidth: false,
    hasMobile: false,
    hasAlignRight: false,
    hasAlignCenter: false,

  };

  ngOnInit() { }

  public pageChangeFn = (numPage) => {
    console.log('jbPageChange callback ', numPage);
  }
  public upComp = () => {
    this.customCompCode = `<jb-list-paginator `;

    let compClasses = '';
    if (this.compConf.hasFullWidth) { compClasses += (!!compClasses.length ? ' ' : '') + 'full-width'; }
    if (this.compConf.hasAlignRight) { compClasses += (!!compClasses.length ? ' ' : '') + 'align-right'; }
    if (this.compConf.hasAlignCenter) { compClasses += (!!compClasses.length ? ' ' : '') + 'align-center'; }
    if (!!compClasses) {
      this.customCompCode += `class="${compClasses}"` + this.bsStr;
    }
    this.customCompCode += `[jbCtrl]="myList"`;
    if (this.compConf.hasPageChange) { this.customCompCode += this.bsStr + `(jbPageChange)="doSomething($event)"`; }
    if (this.compConf.hasMaxButtons) { this.customCompCode += this.bsStr + `jbMaxButtons="${this.compConf.jbMaxButtons}"`; }
    if (this.compConf.jbShowSelector) { this.customCompCode += this.bsStr + `jbShowSelector="true"`; }

    this.customCompCode += (`>` + this.brStr + `</jb-list-paginator>`);
  }
  public changeNum = (value, delta) => {
    let result: number;
    if (typeof value !== 'number' && !Number.isNaN(value)) {
      result = parseInt(value) || 0;
    } else {
      result = value;
    }
    result = result + delta;
    if (result < 0) { result = 0; }
    return result;
  }




}


export const jbListPaginatorDoc = {
  name    : `jb-list-paginator`,
  uiType  : 'component',
  desc    : `Generates a list of buttons to control the pagination of a list`,
  api     : `[jbShowSelector] : (boolean) Whether to show the dropdown with the number of items per page
[jbMaxButtons]   : (number) Number of maximum extra page buttons to display next to every side of the current page (0=1, 1=3, 2=5, 3=7, 4=9 ... x=2x+1)
(jbPageChange)   : Event triggered every time the page changes (same as "goToPage")
[jbCtrl]         : (object) Wrapper with the main properties
                    jbCtrl.currentPage : (number) The current page of the list
                    jbCtrl.totalPages  : (number) The total number of pages (list.length \ rowsPerPage)
                    jbCtrl.rowsPerPage : (number) Number of items to display per page
                    jbCtrl.goToPage    : (function) Callback function to trigger every time the current page changes`,
  instance: `<jb-list-paginator [jbCtrl]="myList"></jb-list-paginator>`,
  demoComp: JbListPaginatorDemoComponent
};
