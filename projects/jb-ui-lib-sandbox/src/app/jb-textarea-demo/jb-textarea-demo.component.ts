import { Component, OnInit } from '@angular/core';
import {JbGrowlService} from '../../../../jb-ui-lib/src/lib/jb-growl/jb-growl.service';
import {IjbInputCtrl} from '../../../../jb-ui-lib/src/lib/jb-input/jb-input.component';

@Component({
  selector: 'app-jb-textarea-demo',
  templateUrl: './jb-textarea-demo.component.html',
  styleUrls: ['./jb-textarea-demo.component.scss']
})
export class JbTextareaDemoComponent implements OnInit {
  public name = jbTextareaDoc.name;
  public desc = jbTextareaDoc.desc;
  public api = jbTextareaDoc.api;
  public instance = jbTextareaDoc.instance;
  public instance2 = `<jb-textarea</jb-textarea>`;
  public myVal = '';
  public flatExample = '<jb-textarea class="flat" [ngModel]="myVal"></jb-textarea>';
  public resizeExample = '<jb-textarea class="resize" [ngModel]="myVal"></jb-textarea>';
  public inputRef: IjbInputCtrl; // jb-textarea controller object (ctrlObject)
  public cssReset = `$textarea-optional-color  : $optional-color !default;  // <-- this is a bootstrap default
$textarea-focused-color   : $focused-color !default;
$textarea-disabled-color  : $disabled-color !default;
$textarea-required-color  : $required-color !default;
$textarea-invalid-color   : $invalid-color !default;`;

  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n             `;
  public code = ``;
  public conf = {
    isRequired: false,
    isDisabled: false,
    rows: 4,
    hasErrOnPristine: false,
    isMinLen: false, minLen: 1,
    isMaxLen: false, maxLen: 1,
    hasLabel: true,      labelText: 'view.common.username',
    hasPlaceholder: false, placeholder: 'view.common.placeholder',
    hasTooltip: false, tooltipText: 'view.tooltip.message', tooltipPos: null, tooltipBody: false,
    hasPattern: false, pattern: '[A-Za-z]{3,20}',
    hasValidIf: false, hasjbValidator: false,
    hasManualErr: false,
    autofocus: false,

    hasKeyDown: false, hasKeyEsc: false, hasKeyCtrlEnter: false,
    hasOnLoad: false, hasBeforeChange: false,
    hasFlat: false,
  };
  public upComp = () => {
    this.code = `<jb-textarea `;

    let compClasses = '';
    if (this.conf.hasFlat) { compClasses += (!!compClasses.length ? ' ' : '') + 'flat'; }
    if (!!compClasses) {
      this.code += `class="${compClasses}"` + this.bsStr;
    }
    this.code += `[(ngModel)]="myVal"`;

    if (this.conf.hasLabel)       { this.code += this.bsStr + `jbLabel="${this.conf.labelText}"`; }
    if (this.conf.hasPlaceholder) { this.code += this.bsStr + `jbPlaceholder="${this.conf.placeholder}"`; }
    if (this.conf.rows !== 4) { this.code += this.bsStr + `[jbRows]="${this.conf.rows}"`; }
    if (this.conf.isRequired) { this.code += this.bsStr + `[jbRequired]="true"`; }
    if (this.conf.isDisabled) { this.code += this.bsStr + `[jbDisabled]="true"`; }
    if (this.conf.hasErrOnPristine)  { this.code += this.bsStr + `[jbErrorOnPristine]="true"`; }
    if (this.conf.autofocus) { this.code += this.bsStr + `[jbAutoFocus]="true"`; }

    if (this.conf.isMinLen)    { this.code += this.bsStr + `jbMinlength="${this.conf.minLen}"`; }
    if (this.conf.isMaxLen)    { this.code += this.bsStr + `jbMaxlength="${this.conf.maxLen}"`; }
    if (this.conf.hasPattern)  { this.code += this.bsStr + `jbPattern="${this.conf.pattern}"`; }
    if (this.conf.hasValidIf)  { this.code += this.bsStr + `[jbValidIf]="val1 === 'AAA'"`; }
    if (this.conf.hasjbValidator) { this.code += this.bsStr + `[jbValidator]="jbValidatorFn"`; }

    if (this.conf.hasTooltip) {
      this.code += this.bsStr + `jbTooltip="${this.conf.tooltipText}"`;
      if (!!this.conf.tooltipPos)  { this.code += this.bsStr + `jbTooltipPos="${this.conf.tooltipPos}"`; }
      if (!!this.conf.tooltipBody) { this.code += this.bsStr + `jbTooltipBody="${this.conf.tooltipBody}"`; }
    }

    if (this.conf.hasKeyDown) { this.code += this.bsStr + `(jbOnKeyDown)="onClickFn($event)"`; }
    if (this.conf.hasKeyEsc)  { this.code += this.bsStr + `(jbOnEsc)="onClickFn($event)"`; }
    if (this.conf.hasKeyCtrlEnter) { this.code += this.bsStr + `(jbOnSave)="onClickFn($event)"`; }

    if (this.conf.hasBeforeChange) { this.code += this.bsStr + `(jbBeforeChange)="doSomething($event)"`; }
    if (this.conf.hasOnLoad || this.conf.hasManualErr) { this.code += this.bsStr + `(jbOnLoaded)="ctrl = $event"`; }

    this.code += (`>` + this.brStr + `</jb-textarea>`);

    if (this.conf.hasjbValidator) {
      this.code += `\n \n jbValidatorFn = (value, ctrl) => value === 'BBB' ? null : { label : 'wrooong' };`;
    }
    if (this.conf.hasManualErr) {
      this.code += `\n \n public ctrl: IjbInputCtrl; // jbTextarea controller object\n`;
      this.code += ` ctrl.addError({ label: 'manual error here' });\n`;
      this.code += ` ctrl.removeError();\n`;
    }
  };



  constructor(
    public growl: JbGrowlService,
  ) { }

  ngOnInit() { }


  public jbValidatorFn = (value, ctrl) => {
    return (value === 'BBB') ? null : { label : 'wrooong' };
  };

}


export const jbTextareaDoc = {
  name    : `jb-textarea`,
  uiType  : 'component',
  desc    : `Generates a textarea component.`,
  api     : `[(ngModel)]     : The ngModel directive is linked to the inner <textarea>, so that can be used as a form element with ngForm (status is propagated).
[jbRows]        : Number of rows of the <textarea> (4 by default).
[jbLabel]       : Label of the input (automatically translated). If not provided, no label is displayed.
[jbRequired]    : Whether the input is required or not
[jbDisabled]    : Whether the input is disabled or not
[jbPlaceholder] : Placeholder text (automatically translated)
[jbAutoFocus]   : (true/false) If true, the textarea will get focused automatically once is initialized (linked to the view)

[jbErrorText]   : Custom error text (label) to display when invalid value
[jbErrorPos]    : Custom position where to display the error text. Values = ['top-right', 'bottom-left', 'bottom-right', 'none', 'default'].
[jbErrorOnPristine] : If true, errors will be shown in pristine state too (by default pristine shows as valid always).
[jbMinlength]   : Min number of chars. Built in validator "minlength"
[jbMaxlength]   : Max number of chars. Built in validator "maxlength". Null means no max. It blocks input if limit.
[jbPattern]     : Regex validator. Built in validator "pattern". Null means no validation.
[jbValidIf]     : Boolean expression to determine the input validity
[jbValidator]   : Callback function called every time the internal ngModel validates its value. Parameter = current value of the model.
                  It should return null (valid) or error object (invalid).

[jbTooltip]     : If label provided, adds a info badge with a tooltip (automatically translated)
[jbTooltipPos]  : Position of the tooltip (top by default)
[jbTooltipBody] : Whether the tooltip is append to the body (default true) or next the the html element (false). The parent contaniner may affect the visibility of the tooltip

(jbOnLoaded)    : Emitter to catch the moment when the component is ready (ngAfterViewInit)
(jbBeforeChange): Emitter to catch the next value before it is set. It returns both (currentValue, nextValue)
(jbOnKeyDown)   : Triggered when a key is pressed on the textarea
(jbOnEsc)       : Triggered when keys Esc is pressed.
(jbOnSave)      : Triggered when keys Ctrl + Enter are pressed. This represents the keyboard combination to save the value
`,
  instance: `<jb-textarea [(ngModel)]="myVal" jbLabel="My Text"></jb-textarea>`,
  demoComp: JbTextareaDemoComponent
};
