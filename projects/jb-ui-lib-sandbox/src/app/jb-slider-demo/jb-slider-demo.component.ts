// jb-slider = 'jb-btn'
// jbSlider = 'jbBtn'


import { Component, OnInit } from '@angular/core';
import {LabelType} from 'ng5-slider';

@Component({
  selector: 'app-jb-slider-demo',
  templateUrl: './jb-slider-demo.component.html',
  styleUrls: ['./jb-slider-demo.component.scss']
})
export class JbSliderDemoComponent implements OnInit {
  public name = jbSliderDoc.name;
  public desc = jbSliderDoc.desc;
  public api = jbSliderDoc.api;
  public instance = jbSliderDoc.instance;



  public cssReset = `$slider_bg           : $white !default;
$slider_color_default: $light !default;
$slider_color_primary: $primary_color !default;`;

  public slider1 = 50;
  public slider1Options = { start: 10, end: 20, step: 2, showTicks: true, showTicksValues: true };
  public instance1Obj = `valueOptions = {
  start: 10, 
  end: 20, 
  step: 2, 
  showTicks: true,
  showTicksValues: true
}`;

  public slider2;
  public slider2Options = { start: 20, end: 120, showTicks: true, showTicksValues: true, tickStep: 10, tickValueStep: 20 };
  public instance2Obj = `valueOptions = { 
  start: 20, 
  end: 120, 
  showTicks: true
  showTicksValues: true, 
  tickStep: 10, 
  tickValueStep: 20 
}`;
  public instance2 = `<jb-slider [(ngModel)]="value"
           [(jbHighValue)]="valueHigh"
           [jbOptions]="valueOptions">
</jb-slider>`;

  public slider3 = 15;
  public slider3Options = { start: 0, end: 100, showTicks: true, tickArray: [5, 10, 15, 25, 40, 65, 100], maxLimit: 60, showSelectionBar: true, showTicksValues: true };
  public instance3Obj = `valueOptions = { 
  start: 0, 
  end: 100, 
  showTicks: true
  tickArray: [5,10,15,25,40,65,100],
  maxLimit: 60,
  showSelectionBar: true,
  showTicksValues: true 
}`;
  public instance3 = `<jb-slider [(ngModel)]="value"
           [jbOptions]="valueOptions">
</jb-slider>`;

  public slider4 = 15;
  public slider4Options = {start: 0, end: 100};
  public instance4Obj = `translateFunc = (value: number)=>{
  return value + ' $';
}`;
  public instance4 = `<jb-slider [(ngModel)]="value"
           [jbOptions]="valueOptions"
           [jbCustomSliderLabel]="translateFunc">
</jb-slider>`;

  /*public slider5 = 80;
  public slider5High = 180;
  public slider5Options = { start: 60, end: 300, showTicks: true, tickArray: [60, 120, 180, 240, 300], showTicksValues: true };
  public instance5Obj = `translateFunc(value: number, label: LabelType) {
  switch (label) {
    case LabelType.Low:
      return 'From:'+value;
    case LabelType.High:
      return 'To:'+value;
    default:
      return value;
  }
}`;
  public instance5 = `<jb-slider [(ngModel)]="value"
           [(jbHighValue)]="valueHigh"
           [jbOptions]="valueOptions"
           [jbTranslate]="translateFunc">
</jb-slider>`;*/


  public valueSlider = 50;
  // public valueSliderHigh = 100;
  public sliderOptions: any = {
    start: 0,
    end: 150
  };


  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n           `;
  public customCompCode = `<jb-slider [(ngModel)]="selObj" [jbList]="myList"></jb-slider>`;
  public compConf: any = {
    // addSecondValue: false,
    // showOuterSection: false,
    isRequired: false,
    isDisabled: false,
    rows: null,
    hasLabel: false,   labelText: 'My Description',
    hasTooltip: false, tooltipText: 'Hello World', tooltipPos: null
  };

  public upComp = () => {
    this.customCompCode = `<jb-slider `;

    this.customCompCode += `[(ngModel)]="myVal"`;
    // if (this.compConf.addSecondValue) { this.customCompCode += this.bsStr + `[(jbHighValue)]="mySecondVal"`; }

    this.customCompCode += this.bsStr + `[jbOptions]="sliderOptions"`;

    // if (this.compConf.showOuterSection) { this.customCompCode += this.bsStr + `[jbShowOuterSection]="true"`; }
    if (this.compConf.isRequired) { this.customCompCode += this.bsStr + `[jbRequired]="true"`; }
    if (this.compConf.isDisabled) { this.customCompCode += this.bsStr + `[jbDisabled]="true"`; }

    if (this.compConf.hasLabel)   { this.customCompCode += this.bsStr + `jbLabel="${this.compConf.labelText}"`; }

    if (this.compConf.hasTooltip) {
      this.customCompCode += this.bsStr + `jbLabelTooltip="${this.compConf.tooltipText}"`;
      if (!!this.compConf.tooltipPos)  { this.customCompCode += this.bsStr + `jbLabelTooltipPos="${this.compConf.tooltipPos}"`; }
    }

    this.customCompCode += (`>` + this.brStr + `</jb-slider>`);

  };

  public newTranslate = (value: number): string => `${value} $`;

  public translate2 = (value: number, label: LabelType) => {
    const labelValue = `${Math.trunc(value / 60)}:${value % 60 > 10 ? value % 60 : '0' + value % 60}`;
    switch (label) {
      case LabelType.Low:
        return `From: ${labelValue}`;
      case LabelType.High:
        return `To: ${labelValue}`;
      default:
        return labelValue;
    }
  };



  constructor() { }

  ngOnInit() { }

}


export const jbSliderDoc = {
  name    : `jb-slider`,
  uiType  : 'component',
  desc    : `Generates a slider component`,
  api     : `[(ngModel)]         : The ngModel directive is linked as value on the Slider
[jbOptions]          : The Config options for the Slider: 
                       {
                         start        : Initial range
                         end          : Final range
                         step         : (Optional) Step between each value
                         showSelectionBar: (Optional) Set to true to show the selection bar before the slider handle
                         showSelectionBarEnd: (Optional) Set to true to show the selection bar after the slider handle
                         showTicks    : (Optional) Set to true to display a tick for each step on the slider
                         showTicksValues: (Optional) Set true to display the value for each tick
                         tickStep     : (Optional) Number - Set the steps to be ticked
                         tickArray    : (Optional) Array - Set specific steps to be ticked
                         tickValueStep: (Optional) Number - Set the steps to show the value
                         maxLimit     : (Optional) Number - max value authorized on the slider
                         minLimit     : (Optional) Number - min value authorized on the slider
                       }
[jbCustomSliderLabel]: [method] = (value: number, label LabelType: LabelType): string => return (The label to be shown as a label on the range)
[jbDisabled]         : Whether the slider is disabled or not
             
[jbLabel]            : Label of the input (automatically translated). If not provided, no label is displayed.
[jbLabelTooltips]    : If label provided, adds a info badge with a tooltip (automatically translated)
[jbLabelTooltipPos]  : Position of the tooltip (top by default)`,
  instance: `<jb-slider [(ngModel)]="value" 
           jbLabel="Test 1" 
           [jbOptions]="valueOptions">
</jb-slider>`,
  demoComp: JbSliderDemoComponent
};
