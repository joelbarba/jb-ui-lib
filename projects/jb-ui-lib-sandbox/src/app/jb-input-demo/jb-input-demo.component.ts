import {AfterViewInit, Component, ElementRef, OnInit, ViewChild} from '@angular/core';
import {JbGrowlService} from '../../../../jb-ui-lib/src/lib/jb-growl/jb-growl.service';
import {Router} from '@angular/router';

@Component({
  selector: 'app-jb-input-demo',
  templateUrl: './jb-input-demo.component.html',
  styleUrls: ['./jb-input-demo.component.scss']
})
export class JbInputDemoComponent implements OnInit, AfterViewInit {
  public name = jbInputDoc.name;
  public desc = jbInputDoc.desc;
  public api = jbInputDoc.api;
  public instance = jbInputDoc.instance;
  public val1;
  public val2 = 'Barba';

  public boxCo = new Array(10); // Box collapsible
  public myVariable3: any;
  public myVariable4: any;
  public myVariable5: any;
  public jbModel: any;
  public isLinked = true;

  constructor(
    public growl: JbGrowlService,
    public router: Router,
  ) {}



  public formExampleInput100 = `<form #myForm="ngForm">

  <jb-input [jbRequired]="true" ngModel="val1" #firstRef="ngModel" name="first">
  </jb-input>

  <jb-input [jbRequired]="true" ngModel="val2" #lastRef="ngModel" name="last">
  </jb-input>

  <jb-btn jbText="Save Form" [jbDisabled]="myForm.invalid"></jb-btn>

</form>`;

  public flatExample = '<jb-input class="flat" [ngModel]="jbModel"></jb-input>';
  public inputColExample = `<jb-input [(ngModel)]="myVar" class="input-col-1" jbLabel="view.common.name"></jb-input>
<jb-input [(ngModel)]="myVar" class="input-col-2" jbLabel="view.common.name"></jb-input>
<jb-input [(ngModel)]="myVar" class="input-col-5" jbLabel="view.common.name"></jb-input>`;

  public cssReset = `$input-optional-color  : $optional-color !default;  // <-- this is a bootstrap default
$input-focused-color   : $focused-color !default;
$input-disabled-color  : $disabled-color !default;
$input-required-color  : $required-color !default;
$input-invalid-color   : $invalid-color !default;
$input-valid-color     : $valid-color !default;`;



  public btnIcons = [
    { icon: 'loading'            },
    { icon: 'icon-search'        },
    { icon: 'icon-pencil'        },
    { icon: 'icon-eye'           },
    { icon: 'icon-plus'          },
    { icon: 'icon-minus'         },
    { icon: 'icon-cross'         },
    { icon: 'icon-blocked'       },
    { icon: 'icon-undo2'         },
    { icon: 'icon-home'          },
    { icon: 'icon-office'        },
    { icon: 'icon-phone2'        },
    { icon: 'icon-bell2'         },
    { icon: 'icon-user'          },
    { icon: 'icon-users'         },
    { icon: 'icon-lock'          },
    { icon: 'icon-cog'           },
    { icon: 'icon-bin'           },
    { icon: 'icon-shield'        },
    { icon: 'icon-link'          },
    { icon: 'icon-star-full'     },
    { icon: 'icon-thumbs-up'     },
    { icon: 'icon-notification2' },
    { icon: 'icon-warning2'      },
    { icon: 'icon-checkmark'     },
    { icon: 'icon-loop3'         },
    { icon: 'icon-spell-check'   },
  ];


  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n          `;
  public customCompCode = ``;
  public tooltipPosList = [
    { id: 'top',        text: 'top'    },
    { id: 'right',      text: 'right'  },
    { id: 'bottom',     text: 'bottom' },
    { id: 'left',       text: 'left'   },
  ];
  public tooltipBodyList = [
    { id: 'true',       text: 'true'   },
    { id: 'false',      text: 'false'  },
  ];

  public myVariable = '';
  public compConf = {
    hasLabel: true, labelText: 'view.common.name',

    hasType: false, inputType: 'text', inputTypes: [
      { id: 'text',     text: 'text',     },
      { id: 'number',   text: 'number',   },
      { id: 'password', text: 'password', },
      { id: 'email',    text: 'email',    },
    ],

    hasPlaceholder: false, placeholderText: 'view.common.name',
    isRequired: true, hasAutoFocus: false, hasAutocomplete: true,
    isDisabled: false, disabledTip: '',
    hasIcon: false, inputIcon: 'icon-search',
    hasTooltip: false, inputTooltip: 'Hello World', inputTooltipPos: null, inputTooltipBody: false,

    hasLeftBtn: false, leftBtnIcon: 'icon-plus', hasLeftBtnText: false, leftBtnText: '$',
    hasRightBtn: false, rightBtnIcon: 'icon-eye', hasRightBtnText: false, rightBtnText: 'view.common.yes',

    hasBtnListener: false,
    hasKeyDown: false,
    hasKeyEsc: false,
    hasKeyEnter: false,
    hasKeyCtrlEnter: false,
    hasFlat: false,

    hasOnLoad: false,
    hasBeforeChange: false,
  };




  ngOnInit() {
    this.upComp();
  }
  ngAfterViewInit() {} // console.log('EXT - ngAfterViewInit');

  reLink = () => {
    this.isLinked = false;
    setTimeout(() => this.isLinked = true, 500);
  };


  public upComp = () => {
    this.customCompCode = `<jb-input `;

    let compClasses = '';
    if (this.compConf.hasFlat) { compClasses += (!!compClasses.length ? ' ' : '') + 'flat'; }
    // if (this.compConf.hasAlignRight) { compClasses += (!!compClasses.length ? ' ' : '') + 'align-right'; }
    // if (this.compConf.hasAlignCenter) { compClasses += (!!compClasses.length ? ' ' : '') + 'align-center'; }
    if (!!compClasses) {
      this.customCompCode += `class="${compClasses}"` + this.bsStr;
    }

    this.customCompCode += `[(ngModel)]="myVariable"`;
    if (this.compConf.hasLabel)             { this.customCompCode += this.bsStr + `jbLabel="${this.compConf.labelText}"`; }
    if (this.compConf.hasPlaceholder)       { this.customCompCode += this.bsStr + `jbPlaceholder="${this.compConf.placeholderText}"`; }
    if (this.compConf.hasIcon)              { this.customCompCode += this.bsStr + `jbIcon="${this.compConf.inputIcon}"`; }
    if (this.compConf.inputType !== 'text') { this.customCompCode += this.bsStr + `jbType="${this.compConf.inputType}"`; }
    if (this.compConf.isRequired)           { this.customCompCode += this.bsStr + `[jbRequired]="true"`; }
    if (this.compConf.hasAutoFocus)         { this.customCompCode += this.bsStr + `[jbAutoFocus]="true"`; }
    if (this.compConf.hasAutocomplete)      { this.customCompCode += this.bsStr + `[jbAutocomplete]="true"`; }
    if (this.compConf.isDisabled)           { this.customCompCode += this.bsStr + `[jbDisabled]="true"`; }
    if (!!this.compConf.disabledTip)        { this.customCompCode += this.bsStr + `jbDisabledTip="${this.compConf.disabledTip}"`; }

    if (this.compConf.hasTooltip) {
      this.customCompCode += this.bsStr + `jbTooltip="${this.compConf.inputTooltip}"`;
      if (!!this.compConf.inputTooltipPos) {
        this.customCompCode += this.bsStr + `jbTooltipPos="${this.compConf.inputTooltipPos}"`;
      }
      if (!!this.compConf.inputTooltipBody) {
        this.customCompCode += this.bsStr + `jbTooltipBody="${this.compConf.inputTooltipBody}"`;
      }
    }

    if (this.compConf.hasLeftBtnText && this.compConf.leftBtnText)   { this.customCompCode += this.bsStr + `jbLeftBtnText="${this.compConf.leftBtnText}"`; }
    if (this.compConf.hasLeftBtn && this.compConf.leftBtnIcon)       { this.customCompCode += this.bsStr + `jbLeftBtnIcon="${this.compConf.leftBtnIcon}"`; }
    if (this.compConf.hasRightBtnText && this.compConf.rightBtnText) { this.customCompCode += this.bsStr + `jbRightBtnText="${this.compConf.rightBtnText}"`; }
    if (this.compConf.hasRightBtn && this.compConf.rightBtnIcon)     { this.customCompCode += this.bsStr + `jbRightBtnIcon="${this.compConf.rightBtnIcon}"`; }

    if (this.compConf.hasBtnListener) {
      if (this.compConf.hasLeftBtnText || this.compConf.hasLeftBtn) { this.customCompCode += this.bsStr + `(jbLeftBtnClick)="onClickFn()"`; }
      if (this.compConf.hasRightBtnText || this.compConf.hasRightBtn) { this.customCompCode += this.bsStr + `(jbRightBtnClick)="onClickFn()"`; }
    }

    if (this.compConf.hasKeyDown) { this.customCompCode += this.bsStr + `(jbOnKeyDown)="onClickFn($event)"`; }
    if (this.compConf.hasKeyEsc)  { this.customCompCode += this.bsStr + `(jbOnEsc)="onClickFn($event)"`; }
    if (this.compConf.hasKeyEnter) { this.customCompCode += this.bsStr + `(jbOnEnter)="onClickFn($event)"`; }
    if (this.compConf.hasKeyCtrlEnter) { this.customCompCode += this.bsStr + `(jbOnCtrlEnter)="onClickFn($event)"`; }

    if (this.compConf.hasOnLoad) { this.customCompCode += this.bsStr + `(jbOnLoaded)="ctrl = $event"`; }
    if (this.compConf.hasBeforeChange) { this.customCompCode += this.bsStr + `(jbBeforeChange)="doSomething($event)"`; }

    this.customCompCode += (`>` + this.brStr + `</jb-input>`);
  };


  public checkModelChange = (value) => console.log('Value from ngModel ->', value);
}



export const jbInputDoc = {
  name    : `jb-input`,
  uiType  : 'component',
  desc    : `Generates an text input field.`,
  api     : `[(ngModel)]       : The ngModel directive is linked to the inner <input>, so that can be used as a form element with ngForm (status is propagated).
[jbLabel]         : Label of the input (automatically translated). If not provided, no label is displayed.
[jbRequired]      : Whether the input is required or not
[jbDisabled]      : Whether the input is disabled or not
[jbDisabledTip]   : Text with the tooltip to display on hover when the input is disabled
[jbPlaceholder]   : Placeholder text (automatically translated)
[jbIcon]          : Icon to show into the input floating at the right hand side (this is replaced by jbValidIcon and jbInvalidIcon, once the status changes)
[jbType]          : Type of value to apply to the input (text by default). It can be 'text', 'number', 'password', 'email'
[jbAutoFocus]     : (true/false) If true, the input will get focused automatically once is initialized (linked to the view)
[jbAutocomplete]  : (true/false) Default true, the input focused will prompt the suggestions of the browser to fill the input
[jbTooltip]       : If label provided, adds a info badge with a tooltip (automatically translated)
[jbTooltipPos]    : Position of the tooltip (top by default)
[jbTooltipBody]   : Whether the tooltip is append to the body (default true) or next the the html element (false). The parent contaniner may affect the visibility of the tooltip
[jbLeftBtnIcon]   : Icon to display in a button on the left side of the input (prepend addon https://getbootstrap.com/docs/4.3/components/input-group/#button-addons)
[jbLeftBtnText]   : Text to display in a button on the left side of the input (prepend addon)

[jbMinlength]       : Min number of chars. Built in validator "minlength"
[jbMaxlength]       : Max number of chars. Built in validator "maxlength". Null means no max. It blocks input if limit.
[jbPattern]         : Regex validator. Built in validator "pattern". Null means no validation.
[jbValidType]       : Predefined validator patterns. It overrides jbPattern. Values = [integer, number, decimal, email]
[jbValidIf]         : Boolean expression to determine the input validity
[jbValidator]       : Callback function called every time the internal ngModel validates its value. Parameter = current value of the model.
                      It should return null (valid) or error object (invalid).
[jbErrorOnPristine] : If true, errors will be shown in pristine state too (by default pristine shows as valid always).
[jbInvalidIcon]     : Icon to show when the value is dirty and invalid (by default icon-warning22)
[jbValidIcon]       : Icon to show when the value is dirty and valid (by default none). ()
[jbErrorText]       : Custom error text (label) to display when invalid value
[jbErrorPos]        : Custom position where to display the error text. Values = ['top-right', 'bottom-left', 'bottom-right', 'none']. None will hide the error text.

(jbOnLoaded)        : Emitter to catch the moment when the component is ready (ngAfterViewInit)
(jbBeforeChange)    : Emitter to catch the next value before it is set. It returns both (currentValue, nextValue)
(jbLeftBtnClick)  : To listen to left addon button clicks
[jbRightBtnIcon]  : Icon to display in a button on the right side of the input (append addon)
[jbRightBtnText]  : Text to display in a button on the right side of the input (append addon)
(jbRightBtnClick) : To listen to right addon button clicks
(jbOnAutofill)    : To listen to a browser autofill event. It emits every time the browser autofills the input value
(jbOnKeyDown)     : Triggered when a key is pressed on the textarea
(jbOnEsc)         : Triggered when keys Esc is pressed.
(jbOnEnter)       : Triggered when key Enter is pressed.
(jbOnCtrlEnter)   : Triggered when keys Ctrl + Enter are pressed.
`,
  instance: `<jb-input></jb-input>`,
  demoComp: JbInputDemoComponent
};
