import {JbTranslateService} from '../translate.service';
import { Component, OnInit, Inject } from '@angular/core';
import { NgbPopoverConfig } from '@ng-bootstrap/ng-bootstrap';

@Component({
  selector: 'app-jb-label-demo',
  templateUrl: './jb-label-demo.component.html',
  styleUrls: ['./jb-label-demo.component.scss']
})
export class JbLabelDemoComponent implements OnInit {
  public name = jbLabelDoc.name;
  public desc = jbLabelDoc.desc;
  public api = jbLabelDoc.api;
  public instance = jbLabelDoc.instance;

  public instance2 =
`<jb-label jbText="view.common.name" [jbRequired]="true"></jb-label>`;
  public instance3 =
`<jb-label jbText="view.common.email" jbRequired="true"
          jbTooltip="view.tooltip.message">
</jb-label>`;
  public instance4 =
`<jb-label jbText="view.common.name"
          jbTooltip="view.tooltip.message" jbTooltipPos="left" [jbTooltipBody]="false">
</jb-label>`;
  public instance5 = `<jb-label class="no-bold" jbText="No Bold Label"></jb-label>`;
  public instance6 = `<jb-label class="no-colon" jbText="No Colon Label"></jb-label>
<jb-label class="colon value-inline" jbValue="Colon with no label"></jb-label>`;

  public jbHtmlStructure =
`<label class="is-required">
  <span class="info-badge" [ngbTooltip]="jbTooltip" [placement]="jbTooltipPos" triggers="hover" container="body">
    <span class="icon-info"></span>
  </span>
  <span>{{jbTextTranslated}}</span>:
  <span class="asterisk">*</span>
</label>`;

  public valueInlineExample = `<jb-label jbText="Label" jbValue="The second value" class="value-inline"></jb-label>`;
  public valueListExample = `<jb-label class="value-list-3" jbText="User Name"   jbValue="Joel Barba" ></jb-label>
<jb-label class="value-list-3" jbText="Email"       jbValue="joel.barba@gmail.com"></jb-label>
<jb-label class="value-list-3" jbText="Number"      jbValue="+353 089 422 6474"></jb-label>
<jb-label class="value-list-3" jbText="Description" jbValue="He is a very nice guy"></jb-label>`;

  public transAbsService = `export abstract class AbstractTranslateService {
  constructor() { }

  // Synchronous translation
  abstract doTranslate(label ?: string): string;
}`;

  public injectLibEx = `import { JbTranslateService } from './translate.service';

@NgModule({
 imports: [
  JbUiLibModule.forRoot({ TranslateService: JbTranslateService })`;


  public extendTransLib = `export class TranslateService extends AbstractTranslateService {
 constructor() { super(); }

 doTranslate(label ?: string): string { â€¦ }
}`;

  public cssReset = `label.is-required {
  color: $primary_color;
}`;


  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n          `;
  public customCompCode = ``;
  public compConf = {
    hasLabel: true, text: 'view.common.username',
    hasValue: false, value: 'view.common.field_name',
    isRequired: true,
    hasTooltip: true, tooltipText: 'view.tooltip.message', tooltipPos: null, tooltipBody: 'true',
    hasBlock: false,
    hasNoBold: false,
    hasNoColon: false,
    hasColon: false,
    hasValueInline: false,
    hasValueList: false,
    hasValueBold: false,
    hasValueLight: false,
    hasEllipsis: false,
    textSize: null,
    valueList: null,
    valueMar: null,
    valuePrimary: false,
    valueWarning: false,
  };
  public textSizes = [];
  public valueLists = [];
  public valueMars = [];
  public upComp = () => {
    this.customCompCode = `<jb-label `;

    let compClasses = '';
    if (this.compConf.hasBlock)       { compClasses += (!!compClasses.length ? ' ' : '') + 'block'; }
    if (this.compConf.hasNoColon)     { compClasses += (!!compClasses.length ? ' ' : '') + 'no-colon'; }
    if (this.compConf.hasColon)       { compClasses += (!!compClasses.length ? ' ' : '') + 'colon'; }
    if (this.compConf.hasValueInline) { compClasses += (!!compClasses.length ? ' ' : '') + 'value-inline'; }
    if (this.compConf.hasValueList)   { compClasses += (!!compClasses.length ? ' ' : '') + 'value-list'; }
    if (this.compConf.hasNoBold)      { compClasses += (!!compClasses.length ? ' ' : '') + 'no-bold'; }
    if (this.compConf.hasValueBold)   { compClasses += (!!compClasses.length ? ' ' : '') + 'value-bold'; }
    if (this.compConf.hasValueLight)  { compClasses += (!!compClasses.length ? ' ' : '') + 'value-light'; }
    if (this.compConf.hasEllipsis)    { compClasses += (!!compClasses.length ? ' ' : '') + 'ellipsis'; }
    if (this.compConf.valuePrimary)   { compClasses += (!!compClasses.length ? ' ' : '') + 'value-primary'; }
    if (this.compConf.valueWarning)   { compClasses += (!!compClasses.length ? ' ' : '') + 'value-warning'; }
    if (this.compConf.textSize)       { compClasses += (!!compClasses.length ? ' ' : '') + this.compConf.textSize; }
    if (this.compConf.valueMar)       { compClasses += (!!compClasses.length ? ' ' : '') + this.compConf.valueMar; }
    if (this.compConf.valueList)      { compClasses += (!!compClasses.length ? ' ' : '') + this.compConf.valueList; }
    if (!!compClasses) {
      this.customCompCode += `class="${compClasses}"` + this.bsStr;
    }

    if (this.compConf.hasLabel) { this.customCompCode += `jbText="${this.compConf.text}"`; }
    if (this.compConf.hasValue) { this.customCompCode += (!this.compConf.hasLabel ? '' : this.bsStr) + `jbValue="${this.compConf.value}"`; }

    if (this.compConf.isRequired) { this.customCompCode += this.bsStr + `[jbRequired]="true"`; }

    if (this.compConf.hasTooltip) {
      this.customCompCode += this.bsStr + `jbTooltip="${this.compConf.tooltipText}"`;
      if (!!this.compConf.tooltipPos)  { this.customCompCode += this.bsStr + `jbTooltipPos="${this.compConf.tooltipPos}"`; }
      if (!!this.compConf.tooltipBody) { this.customCompCode += this.bsStr + `jbTooltipBody="${this.compConf.tooltipBody}"`; }
    }

    this.customCompCode += (`>` + this.brStr + `</jb-label>`);
  }




  constructor(
    private translate: JbTranslateService,
    private config: NgbPopoverConfig
  ) {
    // Popover default config
    // config.placement = 'top';
    // config.triggers = 'hover';
    // config.container = 'body';

    for (let t = 30; t >= 1; t--) { this.textSizes.push({id: 'text-' + t }); }
    for (let t = 1; t <= 10; t++) { this.valueLists.push({id: 'value-list-' + t }); }
    for (let t = 0; t <=  6; t++) { this.valueMars.push({id: 'value-mar-' + (t * 5) }); }
  }

  ngOnInit() {
    // this.translate.doTranslate('AAAAAAAA');
    this.upComp();
  }

}


export const jbLabelDoc = {
  name    : `jb-label`,
  uiType  : 'component',
  desc    : `Generates a label to title an element in a form.`,
  api     : `[jbText]        : Text to display as label
[jbValue]       : Static value for the label (optional).
[jbRequired]    : Whether the label is for a required field. It adds the class "is-required" on the label (to change the color), and an asterisk after the text.
[jbTooltip]     : If set, an info bullet will be added before the label, with a tooltip of the text
[jbTooltipPos]  : Position of the tooltip (top by default)
[jbTooltipBody] : Whether the tooltip is append to the body (default true) or next the the html element (false). The parent contaniner may affect the visibility of the tooltip`,
  instance: `<jb-label jbText="view.common.username"></jb-label>`,
  demoComp: JbLabelDemoComponent
};
