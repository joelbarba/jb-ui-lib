// jb-time-picker = 'jb-btn'
// jbTimePicker = 'jbBtn'


import { Component, OnInit } from '@angular/core';
import { tap } from 'rxjs/operators';
import { JbUiLibTransService } from 'projects/jb-ui-lib/src/public_api';
import jbDate from '../../../../jb-ui-lib/src/lib/jb-prototypes/date.prototype';

@Component({
  selector: 'app-jb-time-picker-demo',
  templateUrl: './jb-time-picker-demo.component.html',
  styleUrls: ['./jb-time-picker-demo.component.scss']
})
export class JbTimePickerDemoComponent implements OnInit {
  public name = jbTimePickerDoc.name;
  public desc = jbTimePickerDoc.desc;
  public api = jbTimePickerDoc.api;
  public instance = jbTimePickerDoc.instance;
  public count = 0;
  public minTime = new Date();
  public maxTime = new Date();
  public defaultTimezone: any;
  public defaultStartDate: Date;
  public supportedTimezones: Array<{ country_code: string, time_zone: string }>;
  public instance2: string;
  public instance3: string;

  public cssReset = `$optional_input_color : $optional-color;
$focused_input_color  : $focused-color;
$required_input_color : $primary_color;
$invalid_input_color  : $invalid-color;
$valid_input_color    : $primary_color;
$disabled_input_color : $disabled-color;

.jb-time-picker-form-group {
  ...
}`;

  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n             `;
  public customCompCode = `
    <jb-time-picker
      [(jbSelectedTime)]="selectedTime"
      [(jbSelectedTimezone)]="selectedTimezone"
      [jbSupportedTimezones]="supportedLocales">
    </jb-time-picker>`;

  public compConf: any = {
    isDisabled: false,
    minTime: null,
    maxTime: null,
    jbLocale: null
  };

  public localesList = [
    { code: 'zh-CN',  name: 'zh-CN' },
    { code: 'zh-TW',  name: 'zh-TW' },
    { code: 'da',     name: 'da' },
    { code: 'nl',     name: 'nl' },
    { code: 'en-CA',  name: 'English CA (en-CA)' },
    { code: 'en-GB',  name: 'English GB (en-GB)' },
    { code: 'en-IE',  name: 'English IE (en-IE)' },
    { code: 'en-US',  name: 'English US (en-US)' },
    { code: 'fi',     name: 'fi' },
    { code: 'fr',     name: 'fr' },
    { code: 'de',     name: 'de' },
    { code: 'el',     name: 'el' },
    { code: 'it',     name: 'it' },
    { code: 'ja',     name: 'ja' },
    { code: 'no',     name: 'no' },
    { code: 'pl',     name: 'pl' },
    { code: 'sv',     name: 'sv' },
    { code: 'es-ES',  name: 'es-ES' },
    { code: 'es-MX',  name: 'es-MX' },
    { code: 'pt-PT',  name: 'pt-PT' },
    { code: 'pt-BR',  name: 'pt-BR' },
    { code: 'in',     name: 'in' },
    { code: 'ar',     name: 'ar' },
    { code: 'ru',     name: 'ru' },
    { code: 'ms-SG',  name: 'ms-SG' },
    { code: 'ms-MY',  name: 'ms-MY' },
    { code: 'ms-ID',  name: 'ms-ID' },
    { code: 'tr',     name: 'tr' },
    { code: 'kr',     name: 'kr' }
  ];

  public upComp = () => {
    this.customCompCode = `
     <jb-time-picker
        [(jbSelectedTime)]="selectedTime"
        [(jbSelectedTimezone)]="selectedTimeZone"
        [jbSupportedTimezones]="supportedTimezones"
        [jbDisabled]="${this.compConf.isDisabled}${this.compConf.minTime !== null ? ' [jbMinTime]="' + this.compConf.minTime + '"' : ''}${this.compConf.maxTime !== null ? ' [jbMaxTime]="' + this.compConf.maxTime + '"' : ''}">
      </jb-time-picker>`;

    this.translateService.locale$.next(this.compConf.jbLocale);
  };

  constructor(private translateService: JbUiLibTransService) {}

  ngOnInit() {
    this.translateService.locale$.asObservable()
      .pipe(
        tap((locale: string) => {
          this.compConf.jbLocale = locale;
        })
      )
      .subscribe();

    this.supportedTimezones = [
      'Europe/Budapest',
      'Europe/Dublin',
      'Europe/London',
      'US/Arizona'
    ].map(timezone => ({ country_code: null, time_zone: timezone }));

    this.defaultStartDate = new Date();

    jbDate.addDays.call(this.maxTime, 2);
    jbDate.addHours.call(this.minTime, 2);

    this.defaultTimezone = 'Europe/Dublin';
    this.instance2 = `
      <jb-time-picker
        [(jbSelectedTime)]="defaultStartDate"
        [jbMinTime]="minTime"
        [jbMaxTime]="maxTime"
        [jbDefaultTimezone]="defaultTimezone"
        [jbSupportedTimezones]="supportedTimezones">
      </jb-time-picker>`;

    this.instance3 = `
      <jb-time-picker
        [(jbSelectedTime)]="defaultStartDate"
        [jbMinTime]="minTime"
        [jbMaxTime]="maxTime"
        [jbDefaultTimezone]="defaultTimezone"
        [jbSupportedTimezones]="supportedTimezones"
        [jbDisabled]="true">
      </jb-time-picker>
    `;
  }
}


export const jbTimePickerDoc = {
  name    : `jb-time-picker`,
  uiType  : 'component',
  desc    : `Generates a ....`,
  api     : `
    [jbLabel]: The label to apply to the component if necessary
    [(jbSelectedTime)]: The value that will recieve updates to date/time can supply default value
    [(jbSelectedTimezone)]: The value of the desired timezone
    [jbSupportedTimezones]: An list of supported timezones
    [jbDisabled]: A flag to determine if the time-picker is disabled
    [jbMinTime]: The minimum allowable datetime, if no minimum time is specified it will be set as now
    [jbMaxTime]: The maximum allowable datetime
    [jbPlacement]: The position to render the dropdown container. Default value is 'bottom' see <a href="https://ng-bootstrap.github.io/#/components/dropdown/api">Angular Bootstap</a> for all possible values

    (jbSelectedTimeChange): An event emitted when the selected time has been changed
    (jbSelectedTimezoneChange): An event emitted when the selected timezone has changed
  `,
  instance: `
    <jb-time-picker
      [jbSelectedTimezone]="'Europe/Dublin'"
      [jbSupportedTimezones]="[{ country_code: null, time_zone: 'Europe/Dublin' }, { country_code: null, time_zone: 'US/Arizona' }]">
    </jb-time-picker>
  `,
  demoComp: JbTimePickerDemoComponent
};
