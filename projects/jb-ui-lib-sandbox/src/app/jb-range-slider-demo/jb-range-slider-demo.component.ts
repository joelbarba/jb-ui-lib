// jb-range-slider = 'jb-btn'
// jbRangeSlider = 'jbBtn'


import { Component, OnInit } from '@angular/core';
import {LabelType} from 'ng5-slider';

@Component({
  selector: 'app-jb-range-slider-demo',
  templateUrl: './jb-range-slider-demo.component.html',
  styleUrls: ['./jb-range-slider-demo.component.scss']
})
export class JbRangeSliderDemoComponent implements OnInit {
  public name = jbRangeSliderDoc.name;
  public desc = jbRangeSliderDoc.desc;
  public api = jbRangeSliderDoc.api;
  public instance = jbRangeSliderDoc.instance;

//   public instance2 =
// `<jb-range-slider</jb-range-slider>`;


  public cssReset = `$slider_bg            : $white !default;
$slider_color_default : $light !default;
$slider_color_disabled: $disabled-color !default;
$slider_color_primary : $primary_color !default;`;

  public slider1 = { min: 40, max: 60 };
  public slider1Options: any = { start: 0, end: 100, step: 5, showTicks: true, showTicksValues: true, tickStep: 10, tickValueStep: 20, maxLimit: 85, minLimit: 15 };
  public instance1Obj = `valueOptions = {
  start: 0,
  end: 100,
  step: 5,
  showTicks: true,
  showTicksValues: true,
  tickStep: 10,
  tickValueStep: 20,
  maxLimit: 85,
  minLimit: 15
}`;

  public slider2 = { min: 40, max: 60};
  public slider2Options: any = { start: 0, end: 100, showTicks: true, tickStep: 10, maxRange: 60, minRange: 20 };
  public instance2Obj = `valueOptions = {
  start: 0,
  end: 100,
  showTicks: true,
  tickStep: 10,
  maxRange: 60,
  minRange: 20
}`;
  public instance2 = `<jb-range-slider [(ngModel)]="slider2"
                 [jbOptions]="slider2Options">
</jb-range-slider>`;

  public slider3 = { min: 40, max: 150};
  public slider3Options: any = { start: 0, end: 300, tickArray: [0, 60, 120, 180, 240, 300], showTicks: true, showTicksValues: true };
  public instance3Obj = `customLabel(val: number, type: LabelType) {
  switch (label) {
    case LabelType.Low:
      return 'from: ' + value;
    case LabelType.High:
      return 'to: ' + value;
    default:
      return value;
  }
}`;
  public instance3 = `<jb-range-slider [(ngModel)]="slider3"
                 [jbOptions]="slider3Options"
                 [jbCustomSliderLabel]="customLabel">
</jb-range-slider>`;




  public valueSlider = { min: 30, max: 100 };
  public sliderOptions: any = { start: 0, end: 150, showTicks: true, showTicksValues: true, tickStep: 25 };

  public sliderModelCode = `
    ngModel.min = ${this.valueSlider.min}
    ngModel.max = ${this.valueSlider.max}`;
  public sliderOptionsCode = `sliderOptions = {
  start: 0,
  end: 150,
  showTicks: true,
  showTicksValues: true,
  tickStep: 25
}`;

  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n                 `;
  public customCompCode = `<jb-range-slider [(ngModel)]="selObj" [jbList]="myList"></jb-range-slider>`;
  public compConf: any = {
    isRequired: false,
    isDisabled: false,
    rows: null,
    showOuterSection: false,
    hasLabel: false,   labelText: 'My Description',
    hasTooltip: false, tooltipText: 'Hello World', tooltipPos: null
  };
  public upComp = () => {
    this.customCompCode = `<jb-range-slider `;

    /*let compClasses = '';
    if (this.compConf.hasFullWidth) { compClasses += (!!compClasses.length ? ' ' : '') + 'full-width'; }
    if (this.compConf.hasSquash)    { compClasses += (!!compClasses.length ? ' ' : '') + 'squash'; }
    if (!!compClasses) {
      this.customCompCode += `class="${compClasses}"` + this.bsStr;
    }*/
    this.customCompCode += `[(ngModel)]="myVal"`;
    this.customCompCode += this.bsStr + `[jbOptions]="sliderOptions"`;

    // if (this.compConf.isRequired) { this.customCompCode += this.bsStr + `[jbRequired]="true"`; }
    if (this.compConf.showOuterSection) { this.customCompCode += this.bsStr + `[jbShowOuterSection]="true"`; }
    if (this.compConf.isDisabled) { this.customCompCode += this.bsStr + `[jbDisabled]="true"`; }

    if (this.compConf.hasLabel)   { this.customCompCode += this.bsStr + `jbLabel="${this.compConf.labelText}"`; }

    if (this.compConf.hasTooltip) {
      this.customCompCode += this.bsStr + `jbTooltip="${this.compConf.tooltipText}"`;
      if (!!this.compConf.tooltipPos)  { this.customCompCode += this.bsStr + `jbTooltipPos="${this.compConf.tooltipPos}"`; }
    }

    this.customCompCode += (`>` + this.brStr + `</jb-range-slider>`);
  };

  public upSliders = () => {
    this.sliderModelCode = `
    ngModel.min = ${this.valueSlider.min}
    ngModel.max = ${this.valueSlider.max}`;
    this.sliderOptionsCode = `sliderOptions = {
  start: 0,
  end: 150,
  showTicks: true,
  showTicksValues: true,
  tickStep: 25
}`;
  };

  newTranslate = (value: number, label: LabelType) => {
    const min = Math.trunc(value / 60);
    const sec = value % 60;
    switch (label) {
      case LabelType.Low:
        return `from: 0${min}:${sec > 10 ? sec : '0' + sec}`;
      case LabelType.High:
        return `to: 0${min}:${sec > 10 ? sec : '0' + sec}`;
      default:
        return `0${min}:${sec > 10 ? sec : '0' + sec}`;
    }
  };




  constructor() { }

  ngOnInit() { }

}


export const jbRangeSliderDoc = {
  name    : `jb-range-slider`,
  uiType  : 'component',
  desc    : `Generates a range slider component`,
  api     : `[(ngModel)]         :The ngModel is linked as an Object on the Range Slider:
                        {
                          min: (Number) - low value of the range,
                          max: (Number) - high value of the range
                        }
[jbOptions]          : The Config options for the Slider:
                       {
                         start        : Initial range
                         end          : Final range
                         step         : (Optional) Step between each value
                         showSelectionBar: (Optional) Set to true to show the selection bar before the slider handle
                         showSelectionBarEnd: (Optional) Set to true to show the selection bar after the slider handle
                         showTicks    : (Optional) Set to true to display a tick for each step on the slider
                         showTicksValues: (Optional) Set true to display the value for each tick
                         tickStep     : (Optional) Number - Set the steps to be ticked
                         tickArray    : (Optional) Array - Set specific steps to be ticked
                         tickValueStep: (Optional) Number - Set the steps to show the value
                         maxLimit     : (Optional) Number - max value authorized on the slider
                         minLimit     : (Optional) Number - min value authorized on the slider
                         maxRange     : (Optional) Number - maximum range authorized on the slider
                         minRange     : (Optional) Number - minimum range authorized on the slider
                       }
[jbCustomSliderLabel]: [method] = (value: number, label LabelType: LabelType): string => return (The label to be shown as a label on the range)
[jbDisabled]         : Whether the slider is disabled or not
[jbShowOuterSection] : Set to true to change the bar color to left/right bars
[jbLabel]            : Label of the input (automatically translated). If not provided, no label is displayed.
[jbLabelTooltips]    : If label provided, adds a info badge with a tooltip (automatically translated)
[jbLabelTooltipPos]  : Position of the tooltip (top by default)`,
  instance: `<jb-range-slider [(ngModel)]="value"
                 jbLabel="Test 1"
                 [jbOptions]="valueOptions">
</jb-range-slider>`,
  demoComp: JbRangeSliderDemoComponent
};
